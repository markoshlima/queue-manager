import json
import redis

#get connection to redis
def connection(host):
    return redis.Redis(host=host, port=6379, db=0, decode_responses=True)

#add new client in queue with rules
def add_client(conn, client):
    try:
        
        id_client = client['id_client']
        
        #get position
        last_queue = get_all(conn, 'last_queue:'+client['id_queue'])
        #if there is nobody in the queue, set firs position
        if not last_queue:
            pos = 1
        else:
            pos = int(last_queue['pos']) + 1
        
        #add new cllient
        client['before'] = 'null'
        client['pos'] = pos
        conn.hmset('client:'+id_client, client)
        
        #add this client in the queue
        conn.sadd('queue:'+client['id_queue'], 'client:'+id_client)
        
        #change the pointer of last one
        conn.hmset('last_queue:'+client['id_queue'], {'pos':pos, 'client':'client:'+id_client})
        
        #change last of queue (before field) if exists
        if last_queue:
            last = get_all(conn, last_queue['client'])
            last['before'] = "client:"+id_client
            conn.hmset(last_queue['client'], last)
            
    except Exception as e:
        print(e)
        print(client)
        raise Exception("ERROR: Unexpected error: Could execute add_client.")

#get all of an element key        
def get_all(conn, key):
    try:
        resp = conn.hgetall(key)
        if not resp:
            return False
        else:
            return resp
    except Exception as e:
        print(e)
        print(key)
        raise Exception("ERROR: Unexpected error: Could execute get_all.")

#get all elements from queue
def get_all_queue(conn, id_queue):
    try:
        members = conn.smembers('queue:'+id_queue)
        
        if not members:
            return False
        else:
            list = []
            for m in members:
                item = get_all(conn, m)
                if item:
                    list.append(item)
            return list
    except Exception as e:
        print(e)
        print(id_queue)
        raise Exception("ERROR: Unexpected error: Could execute get_all_queue.")
 
#remove an element from queue and update all positions before
def remove_client(conn, id_client):
    try:
        
        #get client
        client = get_all(conn, 'client:'+id_client)
        
        #for a while, just the first one could be removed
        if int(client['pos']) != 1:
            raise Exception("ERROR: Only first position could be removed.")
        
        #remove from queue
        conn.delete('client:'+id_client)
        conn.srem('queue:'+client['id_queue'], 'client:'+id_client)
        
        #if its the only one in queue, set var to remove index
        only_one = False
        if client['before'] == "null":
            only_one = True
        
        #update all others before position
        last = client['before']
        position = 0
        while last != 'null':
            cli = get_all(conn, last)
            cli['pos'] = int(cli['pos']) - 1
            position = cli['pos']
            conn.hmset(last, cli)
            last = cli['before']
        
        #if its the only one in queue, remove index
        #else, change the last_queue (index)
        if only_one:
            conn.delete('last_queue:'+client['id_queue'])
        else:
            last_queue = get_all(conn, 'last_queue:'+client['id_queue'])
            last_queue['pos'] = position
            conn.hmset('last_queue:'+client['id_queue'], last_queue)
        
    except Exception as e:
        print(e)
        print(id_client)
        raise Exception("ERROR: Unexpected error: Could execute remove_client.")
        
